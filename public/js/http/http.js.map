{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/http/http.ts"],"names":[],"mappings":";;;IAEA,IAAK,SAGJ;IAHD,WAAK,SAAS;QACV,wBAAW,CAAA;QACX,0BAAa,CAAA;IACjB,CAAC,EAHI,SAAS,KAAT,SAAS,QAGb;IAED;QAAA;QA2CA,CAAC;QA1CG,kBAAG,GAAH,UAAI,GAAW;YAAf,iBAMC;YALG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,IAAI,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACjD,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAChD,KAAK,CAAC,IAAI,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC;QAED,mBAAI,GAAJ,UAAK,GAAW,EAAE,IAAY;YAA9B,iBAMC;YALG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,IAAI,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBAClD,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAChD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,0BAAW,GAAnB,UAAoB,IAAe,EAAE,GAAW;YAC5C,IAAI,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEO,iCAAkB,GAA1B,UAA2B,KAAK,EAAE,OAAO,EAAE,MAAM;YAC7C,KAAK,CAAC,kBAAkB,GAAG;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC;oBACvB,IAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC1C,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACtB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACrF,MAAM,CAAC,QAAQ,CAAC,CAAA;wBACpB,CAAC;oBACL,CAAC;gBACL,CAAC;gBACD;;;mBAGG;gBAEH,2BAA2B;YAC/B,CAAC,CAAC;QACN,CAAC;QACL,WAAC;IAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import Response from \"./response\";\r\n\r\nenum HttpVerbs {\r\n    GET = 'GET',\r\n    POST = 'POST'\r\n}\r\n\r\nexport default class Http {\r\n    get(url: string): Promise<Response> {\r\n        return new Promise((resolve, reject) => {\r\n            let xhttp = this.createXhttp(HttpVerbs.GET, url);\r\n            this.configureCallbacks(xhttp, resolve, reject);\r\n            xhttp.send();\r\n        });\r\n    }\r\n\r\n    post(url: string, data: object): Promise<Response> {\r\n        return new Promise((resolve, reject) => {\r\n            let xhttp = this.createXhttp(HttpVerbs.POST, url);\r\n            this.configureCallbacks(xhttp, resolve, reject);\r\n            xhttp.send(JSON.stringify(data));\r\n        });\r\n    }\r\n\r\n    private createXhttp(verb: HttpVerbs, url: string) {\r\n        let xhttp = new XMLHttpRequest();\r\n        xhttp.open(verb, url, true);\r\n        return xhttp;\r\n    }\r\n\r\n    private configureCallbacks(xhttp, resolve, reject) {\r\n        xhttp.onreadystatechange = function () {\r\n            if (this.readyState == 4) {\r\n                const response = new Response(this.responseText, this.status);\r\n                if (this.status.toString().startsWith('20')) {\r\n                    resolve(response);\r\n                } else {\r\n                    if (this.status.toString().startsWith('40') || this.status.toString().startsWith('50')) {\r\n                        reject(response)\r\n                    }\r\n                }\r\n            }\r\n            /*if (this.readyState == 4 && this.status == 200) {\r\n                resolve(this.responseText); //tiver sucesso\r\n                //\r\n            }*/\r\n\r\n            //reject(this.responseText)\r\n        };\r\n    }\r\n}"]}