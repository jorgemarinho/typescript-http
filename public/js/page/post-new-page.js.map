{"version":3,"file":"post-new-page.js","sourceRoot":"","sources":["../../../src/page/post-new-page.ts"],"names":[],"mappings":";;;IAMA;QAEI,qBAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;YAClC,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,0BAAI,GAAJ;YAAA,iBAOC;YANG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC;iBAC7B,gBAAgB,CAAC,QAAQ,EAAE,UAAC,KAAY;gBACrC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAI,CAAC,MAAM,EAAE,CAAC;gBACd,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;QACX,CAAC;QAED,4BAAM,GAAN;YAAA,iBAQC;YAPG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC;YACX,CAAC;YACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACf,KAAK,EAAE,cAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;gBACvC,IAAI,EAAE,cAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;aACxC,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;QAC1C,CAAC;QAED,6BAAO,GAAP;YACI,IAAM,SAAS,GAAG,IAAI,2BAAgB,CAAC;gBACnC,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,iBAAiB,EAAC;gBAC1F,EAAC,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,mBAAmB,EAAC;aAC9F,CAAC,CAAA;YACF,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,CAAA;QAC9B,CAAC;QAED,kCAAY,GAAZ;YACI,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,sBAAsB,CAAC;QAClD,CAAC;QAGL,kBAAC;IAAD,CAAC,AAtCD,IAsCC;;IAED,IAAI,WAAW,CAAC,IAAI,mBAAQ,EAAE,CAAC,CAAC","sourcesContent":["import Page from \"./page\";\r\nimport PostHttp from \"../http/post-http\";\r\nimport Form from \"../components/form\";\r\nimport ValidatorManager from \"../components/validators/validator-manager\";\r\nimport Validators from \"../components/validators/validators\";\r\n\r\nexport default class PostNewPage implements Page {\r\n\r\n    constructor(private postHttp: PostHttp) {\r\n        this.init();\r\n    }\r\n\r\n    init(): void {\r\n        document.querySelector('#my-form')\r\n            .addEventListener('submit', (event: Event) => {\r\n                event.preventDefault();\r\n                this.submit();\r\n                return false;\r\n            });\r\n    }\r\n\r\n    submit(): void {\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        this.postHttp.save({\r\n            title: Form.getValueFromField('#title'),\r\n            body: Form.getValueFromField('#body')\r\n        }).then((obj) => this.goToPostList());\r\n    }\r\n\r\n    isValid(): boolean {\r\n        const validator = new ValidatorManager([\r\n            {selectorField: '#title', rules: [Validators.required], messageInvalid: 'Título inválido'},\r\n            {selectorField: '#body', rules: [Validators.required], messageInvalid: 'Conteúdo inválido'},\r\n        ])\r\n        return validator.isValid()\r\n    }\r\n\r\n    goToPostList(): void {\r\n        window.location.href = '/post/post-list.html';\r\n    }\r\n\r\n\r\n}\r\n\r\nnew PostNewPage(new PostHttp());"]}